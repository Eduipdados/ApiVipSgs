	SELECT *
	FROM SCF.SAP_TIPOS_TITULOS_AVULSOS
	
	SELECT *									
	FROM scf.Parametros_chave -- criar parametro diluiçãofacilitada
	WHERE CHAVE = 'TIPO_TITULO_DIF_FACILITADA'
	
	
	SELECT *
	FROM SCA.ALUNOS_DILUICOES ad 
	
	SELECT *
	FROM SCA.pgto_alunos
	WHERE IDT_ALU IN (727777, 17948)
	AND SEMESTRE = 3

	SELECT VALOR
      --INTO v_tipo_titulo_dif_facilitada
	FROM scf.Parametros_chave
	WHERE CHAVE = 'TIPO_TITULO_DIF_FACILITADA';

    SELECT VALOR
      --INTO v_convenio_dif_facilitada
	FROM scf.Parametros_chave
	WHERE CHAVE = 'CONVENIO_DIF_FACILITADA';

	SELECT  *	 
	FROM SCA.V_ALUNOS
	WHERE IDT_ALU = 17948;
	
SELECT *
FROM SCA.pgto_alunos

	-- INICIO CRIANDO TABELA LOG
CREATE TABLE SCA.PARCELAS_DILUICOES_TITULOS_AV(
   ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
   IDT_ALU NUMBER(6,0) NOT NULL,
   MAT_ALU NUMBER(10,0) NOT NULL,
   ID_EXTERNO VARCHAR2(200) NOT NULL,
   ANO NUMBER(4,0) NOT NULL,
   SEMESTRE NUMBER(1,0) NOT NULL,
   PARCELA NUMBER(1,0) NOT NULL,
   VALOR NUMBER(8,2) NOT NULL,
   DAT_EFECT_INC TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP(6),
   PRIMARY KEY(ID)
)
	-- FIM CRIANDO TABELA LOG

	--INICIO CRIANDO INDEX 
	create index alunos_ano_semestre_ix on SCA.pgto_alunos (ANO, SEMESTRE, IDT_ALU);
	--FIM CRIANDO INDEX 
	
	-- INICIO - CRIANDO PARAMETROS DE TESTE
	
	INSERT INTO SCF.SAP_TIPOS_TITULOS_AVULSOS(CODIGO, DESCRICAO, FATURA, IDT_CONVENIO)
	VALUES(26, 'Diluição Facilitada', 'F', 8)
	
	INSERT INTO scf.Parametros_chave 
	VALUES('TIPO_TITULO_DIF_FACILITADA', 'Tipo titulo diluição facilitada', 26)
	
	INSERT INTO scf.Parametros_chave 
	VALUES('CONVENIO_DIF_FACILITADA', 'Tipo titulo diluição facilitada', 8)
	
	-- FIM - CRIANDO PARAMETROS DE TESTE     
	-- INICIO CRIAR PROCEDURE
     
		CREATE OR REPLACE PROCEDURE SCF.P_GER_TIT_AVU_DIL_FAC(
	 p_ano       NUMBER,
     p_sem       NUMBER,
     p_idt_alu   NUMBER,
	 p_status    OUT  NUMBER,
	 p_msg       OUT  VARCHAR2)
	IS
	  CURSOR c_parcelas_semestre_aluno IS 
	     SELECT DAT_VENC
         FROM SCA.pgto_alunos
         WHERE ANO = p_ano
         AND SEMESTRE = p_sem
         AND IDT_ALU = p_idt_alu;          
    
     v_cpf_aluno SCA.V_ALUNOS.CPF_ALU%TYPE;
     v_matricula_aluno SCA.V_ALUNOS.MAT_ALU%TYPE;
    
     v_tipo_titulo_dif_facilitada scf.Parametros_chave.VALOR%TYPE;
     v_convenio_dif_facilitada scf.Parametros_chave.VALOR%TYPE;
   
	 v_valor_diluido_semestre SCA.ALUNOS_DILUICOES.VALOR_DILUIDO_SEMESTRE%TYPE DEFAULT 0;  
	 v_valor_lancado SCA.ALUNOS_DILUICOES.VALOR_LANCADO%TYPE DEFAULT 0;  
 	 v_valor_total SCA.ALUNOS_DILUICOES.VALOR_TOTAL%TYPE DEFAULT 0;
 	 v_valor_parcela SCA.ALUNOS_DILUICOES.VALOR_DILUIDO_SEMESTRE%TYPE DEFAULT 0;
 	 v_valor_parcela_auxiliar SCA.ALUNOS_DILUICOES.VALOR_DILUIDO_SEMESTRE%TYPE DEFAULT 0;
     v_id_externo VARCHAR2(500);
 	
 	 v_quantidade_parcelas integer DEFAULT 0;
     v_auxiliar_inclusao_parcelas integer DEFAULT 1; 
 	 v_auxiliar_valor_parcelas_inclusas NUMBER(8,2) DEFAULT 0;
 	
     v_auxiliar_count integer DEFAULT 0;
    
	BEGIN	
		-- INICIO OBTENDO VALOR VARIAVEIS
		
	    v_tipo_titulo_dif_facilitada := scf.pkg_bibscf.obter_valor_parametro('TIPO_TITULO_DIF_FACILITADA');
	
		v_convenio_dif_facilitada := scf.pkg_bibscf.obter_valor_parametro('CONVENIO_DIF_FACILITADA');
       
	 	SCA.DILUICOES_FACILITADAS_PKG.obter_dados_aluno(p_idt_alu, v_matricula_aluno, v_cpf_aluno);
		
		FOR data_ IN c_parcelas_semestre_aluno LOOP
    	   v_quantidade_parcelas := v_quantidade_parcelas + 1;
  		END LOOP;  				  	  		
     
		SCA.DILUICOES_FACILITADAS_PKG.obter_dados_aluno_diluicoes(p_idt_alu, 1, v_valor_diluido_semestre, v_valor_lancado, v_valor_total);
	
    	v_valor_parcela := Round((v_valor_diluido_semestre / v_quantidade_parcelas), 2);
	
		-- FIM OBTENDO VALOR VARIAVEIS
		
	-- FLUXO EXECULTADO APENAS SE EXISTE VALOR PENDENTE A SER LANÇADO
		IF(v_valor_lancado < v_valor_total) THEN	
		
			-- SE O VALOR PENDENTE È MENOR QUE O VALOR A DILUIR POR SEMESTRE É REALIZADO UM AJUSTE NO VALOR
			IF((v_valor_total - v_valor_lancado) < v_valor_diluido_semestre) THEN
				v_valor_diluido_semestre := v_valor_total - v_valor_lancado;
			END IF;	
		
		-- PARA CADA PARCELA CRIADA PARA O ALUNO NO SEMESTRE É CRIADA UMA PARCELA DILUIÇÃO FACILITADA
			FOR c_parcelas IN c_parcelas_semestre_aluno LOOP
					
                v_valor_parcela_auxiliar := v_valor_parcela;
	
	   			-- AJUSTE DE DIZIMAS NA ULTIMA PARCELA DO SEMESTRE
                IF(v_auxiliar_inclusao_parcelas = v_quantidade_parcelas) THEN
                    v_valor_parcela_auxiliar := v_valor_parcela + (v_valor_diluido_semestre - (v_valor_parcela * v_quantidade_parcelas)); 
                END IF;
               
                v_id_externo := v_matricula_aluno||';'||p_ano||';'||p_sem||';'||v_auxiliar_inclusao_parcelas;
                
               v_auxiliar_count := SCA.DILUICOES_FACILITADAS_PKG.existe_titulo_avulso(v_tipo_titulo_dif_facilitada,
                                                                                      v_convenio_dif_facilitada,
                                                                                      v_id_externo,
                                                                                      'A',
                                                                                      'SCA');
                v_auxiliar_count := 0;
		      
                IF(v_auxiliar_count = 0) THEN
                
                   dbms_output.put_line('TESTE');
                   
                  scf.sap_titulos_avulsos_pkg.incluir_titulo_avulso(v_cpf_aluno,
                               'Diluição Facilitada - Parcela '||v_auxiliar_inclusao_parcelas||'/'||v_quantidade_parcelas||' ('||p_ano||'/'||p_sem||'º)',
                               v_tipo_titulo_dif_facilitada,
                               v_convenio_dif_facilitada,
                               c_parcelas.DAT_VENC,
                               v_valor_parcela_auxiliar,
                               0,
                               'F',
                               v_id_externo,
                               'SCA',
                               'F',
                               p_status, -- VALIDAR STATUS DE RETORNO SE 0 EXECULTADO COM SUCESSO!!!
                               p_msg);
                
                   IF(p_status != 0) THEN
                       raise_application_error( -20000, p_msg );
                   END IF;
	          
	          	-- insert tabela log
	          
                  SCA.DILUICOES_FACILITADAS_PKG.incluir_dif_tit_avu(p_idt_alu, v_matricula_aluno, v_id_externo, p_ano, p_sem, v_auxiliar_inclusao_parcelas, v_valor_parcela_auxiliar);
		         
		    	  v_auxiliar_valor_parcelas_inclusas :=  v_auxiliar_valor_parcelas_inclusas + v_valor_parcela_auxiliar;
		    	 
                 END IF;                                                   
               
	             v_auxiliar_inclusao_parcelas := v_auxiliar_inclusao_parcelas + 1;
	           
			END LOOP;
			
			-- atualizar tabela alunos
            v_valor_lancado := v_valor_lancado + v_auxiliar_valor_parcelas_inclusas;
		
            IF(v_valor_lancado < v_valor_total) THEN						
				
                SCA.DILUICOES_FACILITADAS_PKG.atualizar_aluno_diluicoes(p_idt_alu, 1, 1, v_valor_lancado);
               
			ELSE				
				
                SCA.DILUICOES_FACILITADAS_PKG.atualizar_aluno_diluicoes(p_idt_alu, 1, 2, v_valor_lancado);						
																										   
			END IF;
		END IF;
		    
	END;

	-- FIM - CRIAR PROCIDURE



	-- INICIO CRIAR PROCEDURE GERAR
	CREATE OR REPLACE PROCEDURE SCF.P_EXEC_TIT_AVU_DIL_FAC()
	IS 
		CURSOR c_diluicoes_pendentes IS 
		SELECT *
		FROM SCA.PARCELAS_DILUICOES_PENDENTES
		WHERE SITUACAO = 0;
	
		p_status    OUT  NUMBER;
	 	p_msg       OUT  VARCHAR2;
	BEGIN 
		
			FOR c_pendente IN c_diluicoes_pendentes LOOP
			
					SCF.P_GER_TIT_AVU_DIL_FAC(c_pendente.ANO,
											  c_pendente.SEMESTRE,
											  c_pendente.IDT_ALU,
										      p_status,
											  p_msg);
											 
					IF(p_status != 0) THEN
					
				       raise_application_error( -20000, p_msg );
				        
				    END IF;
				   
				   UPDATE SCA.PARCELAS_DILUICOES_PENDENTES SET SITUACAO = 1
				   WHERE ID = c_pendente.ID;
			
			END LOOP;
	END;
	-- FIM CRIAR PRODEDURE GERAR

	DECLARE
	P_STATUS NUMBER;
    P_MSG VARCHAR2(100);
	BEGIN
		     	          SCF.P_INC_SAP_TITULO_AVU(v_cpf_aluno,
                               'Diluição Facilitada - Parcela TESTE',
                               'SCA',
                               v_convenio_dif_facilitada,
                               c_parcelas.DAT_VENC,
                               v_valor_parcela_auxiliar,
                               0,
                               'F',
                               v_id_externo,
                               'SCA',
                               'F',
                               p_status, -- VALIDAR STATUS DE RETORNO SE 0 EXECULTADO COM SUCESSO!!!
                               p_msg);
		--SCF.P_GER_TIT_AVU_DIL_FAC(2021, 3, 17948, P_STATUS, P_MSG);
    	--dbms_output.put_line(P_STATUS || P_MSG);
	END;
	

SELECT *
FROM SCF.SAP_TITULOS_AVULSOS

SELECT *
FROM SCA.PARCELAS_DILUICOES_TITULOS_AV


		/*INSERT INTO SCF.SAP_TITULOS_AVULSOS(DSC_TITULO, -- DILUIÇÂO FACILITADA - criar descrição -diluição facilitada P/T ano semestre
	                                    IDT_TIPO_TITULO, -- CADASTAR NOVO TIPO_TITULO? Buscar Parametros_chave
	                                    TIPO_PESSOA, -- F - FISICA J - JURIDIA, DEFAULT F
	                                    CPF_CNPJ -- SCA.V_ALUNOS? - BUSCAR DA V_ALUNOS,
	                                    DATA_VENC, --SCA.pgto_alunos -- PEGAR MESMA DATA DE VENCIMENTO DA PARCELA DO MES SEMESTRE REFERENET
	                                    VAL_TITULO, -- VAL_TITULO VALOR DILUIÇÂO(PARCELA_DILUIÇÃO)
	                                    VAL_DESC --NECESSARIO?, NULL
	                                    VAL_DESC, --NECESSARIO? NULL
	                                    DAT_PGTO, -- ATUALIZADO POSTERIORMENTE? NAO INFORMAR
	                                    MULTA_JURO, -- ATUALIZADO POSTERIORMENTE? NAO INFORMAR
	                                    DAT_EFECT_INC, --? NAO INSERIR DEEFAULT
	                                    TPO_BAIXA, -- ATUALIZADO APOS PAGAMENTO? NAO INFORMAR
	                                    SALDO, -- NECESSARIO? NULLL
										FATURA, -- SE NECESSARIO QUAL VALOR PREENCHER? V - F - MARCAR COMO F
										ID_EXTERNO, -- SE NECESSARIO QUAL VALOR PREENCHER? DEFINIR PADRÃO CHAVEDILUIÇÃO;MATRICULA;ANO;SEMESTRE !!!SEPARADO POR ';'
										IDT_CONVENIO, -- SE NECESSARIO QUAL VALOR PREENCHER? Buscar Parametros_chave EX: CONVENIO_DIF_FACILITADA
										ORIGEM, -- DE ONDE BUSCAR A INFORMAÇÃO INICIALMENTE SCA DILUIÇÃO APENAS PARA PRESENCIAL
										VAL_UTILIZADO, --NECESSARIO? NULL
										VAL_DIF, --NECESSARIO? NULL
										DAT_PGTO_DIF, --NECESSARIO? NULL
										STATUS, -- QUAL VALOR PREENCHER? C E A P V	VIA PROCEDURE NAO É NECESSARIO CASO CONTRARIO A
										DESC_STATUS, -- DE ONDE PEGAR INFORMAÇÂO? CADASTRO DE STATUS? NULL
										FORMA_PGTO,	-- ATUALIZADO APOS PAGAMENTO? NULL
										CARTAO_MAX) --NECESSARIO? NULL*/
	
